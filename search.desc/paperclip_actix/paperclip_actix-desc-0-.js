searchState.loadedDescShard("paperclip_actix", 0, "Derive attribute for indicating that a type is an OpenAPI …\nDerive attribute for indicating that a type is an OpenAPI …\nMarker attribute for indicating that an object forbids …\nIndicates that this thingmabob has a path and a bunch of …\nMarker attribute for indicating that the marked object can …\nMarker attribute for indicating that the marked object can …\nMarker attribute for indicating that a function is an …\nThe definitions recorded by this object.\nCreates route handler with <code>paperclip::actix::web::Resource</code>.\nCreates route handler with <code>paperclip::actix::web::Resource</code>.\nCreates route handler with <code>paperclip::actix::web::Resource</code>.\nMap of HTTP methods and the associated API operations.\nCreates route handler with <code>paperclip::actix::web::Resource</code>.\nWhere this thing gets mounted.\nCreates route handler with <code>paperclip::actix::web::Resource</code>.\nCreates route handler with <code>paperclip::actix::web::Resource</code>.\nThe security definitions recorded by this object.\nUpdates the given map of operations with operations …\nProxy module for <code>actix_web::web</code>.\nWrapper for <code>actix_web::App</code>.\nExtension trait for actix-web applications.\nProxy for <code>actix_web::App::app_data</code>.\nBuilds and returns the <code>actix_web::App</code>.\nWrapper for <code>actix_web::App::configure</code>.\nProxy for <code>actix_web::App::data_factory</code>.\nProxy for <code>actix_web::App::default_service</code>.\nProxy for <code>actix_web::App::external_resource</code>.\nReturns the argument unchanged.\nCalls <code>U::from(self)</code>.\nWrapper for <code>actix_web::App::route</code>.\nWrapper for <code>actix_web::App::service</code>.\nTrim’s the Api base path from the start of all method …\nMounts the specification for all operations and definitions\nConverts the generated v2 specification to v3 and then …\nCalls the given function with <code>App</code> and JSON <code>Value</code> …\nCalls the given function with <code>App</code> and JSON <code>Value</code> …\nExposes the previously built JSON specification with …\nProxy for <code>actix_web::web::App::wrap</code>.\nConsumes this app and produces its wrapper to start …\nSame as <code>wrap_api</code> initializing with provided specification …\nProxy for <code>actix_web::web::App::wrap_fn</code>.\nA cheaply cloneable and sliceable chunk of contiguous …\nA unique reference to a contiguous slice of memory.\nApplication data wrapper and extractor.\nURL encoded payload extractor and responder.\n<code>Form</code> extractor configuration.\nAn incoming request.\nAn outgoing response.\nJSON extractor and responder.\n<code>Json</code> extractor configuration.\nExtract typed data from request path segments.\nPath extractor configuration\nExtract a request’s raw payload stream.\nConfiguration for request payloads.\nExtract typed information from the request’s query.\nQuery extractor configuration.\nRequest-local data extractor.\nWrapper for <code>actix_web::Resource</code>\nWrapper for <code>actix_web::Route</code>\nWrapper for <code>actix_web::Scope</code>\nWrapper for <code>actix_web::web::ServiceConfig</code>.\nReturns a reference to the application’s connection …\nProxy for <code>actix_web::Resource::app_data</code>.\nProxy for <code>actix_web::Scope::app_data</code>.\nProxy for <code>actix_web::web::ServiceConfig::app_data</code>.\nRetrieves a piece of application state.\nExecutes blocking function on a thread pool, returns …\nReturns a reference to this response’s body.\nConstructs a response builder with specific HTTP status.\nReturns the number of bytes the <code>BytesMut</code> can hold without …\nClears the buffer, removing all data.\nClears the buffer, removing all data. Existing capacity is …\nWrapper for <code>actix_web::Scope::configure</code>.\nReturns a reference a piece of connection data set in an …\nReturns connection info for the current request.\nSet predicate for allowed content types.\nSets whether or not the request must have a <code>Content-Type</code> …\nCreates <code>Bytes</code> instance from slice, by copying it.\nProxy for <code>actix_web::web::Resource::default_service</code>.\nProxy for <code>actix_web::web::Scope::default_service</code>.\nWrapper for <code>actix_web::web::delete</code>.\nDrops body and returns new response.\nThe source <code>error</code> for this response\nSet custom error handler\nSet custom error handler.\nSet custom error handler.\nSet custom error handler\nAppends given bytes to this <code>BytesMut</code>.\nReturns reference to the response-local data/extensions …\nReturns reference to the response-local data/extensions …\nProxy for <code>actix_web::web::ServiceConfig::external_resource</code>.\nConverts <code>self</code> into an immutable <code>Bytes</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nConvert self into <code>BytesMut</code>.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nCreate an error response.\nCreate Bytes with a buffer whose lifetime is controlled …\nDeserialize a <code>T</code> from the URL encoded query parameter …\nCreates a new <code>Bytes</code> from a static slice.\nReturns request’s original full URL.\nWrapper for <code>actix_web::web::get</code>.\nReturns reference to inner <code>T</code>.\nProxy for <code>actix_web::Resource::guard</code>.\nProxy for <code>actix_web::Scope::guard</code>.\nProxy for <code>actix_web::Route::guard</code>.\nWrapper for <code>actix_web::web::head</code>.\nReturns a reference to response head.\nThis method returns reference to the request head\nReturns a mutable reference to response head.\nGet the headers from the response\nReturns request’s headers.\nGet a mutable reference to the headers\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns the response body, dropping all other parts.\nUnwrap to inner Payload type.\nUnwraps to the internal <code>Arc&lt;T&gt;</code>\nConsumes the <code>ReqData</code>, returning its wrapped data.\nUnwrap into inner <code>T</code> value.\nUnwrap into inner <code>T</code> value.\nUnwrap into inner <code>T</code> value.\nUnwrap into inner <code>T</code> value.\nReturns split head and body.\nReturns true if the <code>Bytes</code> has a length of 0.\nReturns true if the <code>BytesMut</code> has a length of 0.\nReturns true if this is the only reference to the data and …\nKeep-alive status for this connection\nReturns the number of bytes contained in this <code>Bytes</code>.\nReturns the number of bytes contained in this <code>BytesMut</code>.\nSet maximum accepted payload size. By default this limit …\nSet maximum accepted payload size. By default this limit …\nSet maximum accepted payload size in bytes. The default …\nMap the current body type to another using a closure, …\nMap the current body to a type-erased <code>BoxBody</code>.\nMap the current body type <code>B</code> to <code>EitherBody::Left(B)</code>.\nMap the current body type <code>B</code> to <code>EitherBody::Right(B)</code>.\nReturns a reference to the URL parameters container.\nThe resource name that matched the path. Useful for …\nThe resource definition pattern that matched the path. …\nWrapper for <code>actix_web::web::method</code>.\nWrapper for <code>actix_web::Route::method</code>\nRead the Request method.\nSet required mime type of the request. By default mime …\nProxy for <code>actix_web::Resource::name</code>.\nWrapper for <code>actix_web::Resource::new</code>.\nWrapper for <code>actix_web::Scope::new</code>\nWrapper for <code>actix_web::Route::new</code>\nCreates a new empty <code>Bytes</code>.\nCreates a new <code>BytesMut</code> with default capacity.\nConstructs a response.\nCreate new <code>Data</code> instance.\nCreate new instance with a size limit (in bytes) and no …\nWrapper for <code>actix_web::web::options</code>.\nWrapper for <code>actix_web::web::patch</code>.\nThe target path of this request.\nReturns peer socket address.\nWrapper for <code>actix_web::web::post</code>.\nWrapper for <code>actix_web::web::put</code>.\nThe query string in the URL.\nReserves capacity for at least <code>additional</code> more bytes to be …\nResizes the buffer so that <code>len</code> is equal to <code>new_len</code>.\nWrapper for <code>actix_web::web::resource</code>.\nGet a reference to a <code>ResourceMap</code> of current application.\nWrapper for <code>actix_web::Resource::route</code>.\nWrapper for <code>actix_web::Scope::route</code>.\nWrapper for <code>actix_web::web::ServiceConfig::route</code>.\nWrapper for <code>actix_web::web::scope</code>.\nCreates a raw service for a specific path.\nWrapper for <code>actix_web::Scope::service</code>.\nWrapper for <code>actix_web::web::ServiceConfig::service</code>.\nSets new body.\nSets the length of the buffer.\nReturns a slice of self for the provided range.\nReturns a slice of self that is equivalent to the given …\nReturns the remaining spare capacity of the buffer as a …\nRemoves the bytes from the current view, returning them in …\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the bytes into two at the given index.\nSplits the buffer into two at the given index.\nGet the response status code\nSet the <code>StatusCode</code> for this response\nCreates a new any-method route with handler.\nWrapper for <code>actix_web::Resource::to</code>.\nWrapper for <code>actix_web::Route::to</code>\nBuffers entire payload from request.\nBuffers payload from request up to <code>limit</code> bytes.\nShortens the buffer, keeping the first <code>len</code> bytes and …\nShortens the buffer, keeping the first <code>len</code> bytes and …\nTry to convert self into <code>BytesMut</code>.\nAttempts to cheaply reclaim already allocated capacity for …\nAbsorbs a <code>BytesMut</code> that was previously split off.\nConnection upgrade status\nRequest’s uri.\nGenerates URL for a named resource.\nGenerate URL for named resource\nRead the Request Version.\nConstructs a response with body\nCreates a new <code>BytesMut</code> with the specified capacity.\nProxy for <code>actix_web::web::Resource::wrap</code>.\nProxy for <code>actix_web::web::Scope::wrap</code>.\nProxy for <code>actix_web::web::Resource::wrap_fn</code>.\nProxy for <code>actix_web::web::Scope::wrap_fn</code>.\nCreates a new <code>BytesMut</code> containing <code>len</code> zeros.")