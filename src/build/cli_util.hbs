use clap::ArgMatches;
use crate::client::\{ApiClient, ApiError, Sendable};
use serde::\{Serialize, Deserialize};

use std::io::Read;

pub(crate) fn read_from_input<T>(matches: Option<&ArgMatches<'_>>) -> Result<T, crate::ClientError>
where
    T: Serialize,
    for<'de> T: Deserialize<'de>
\{
    let path = matches
        .expect("no args for builder with body?")
        .value_of("payload").expect("payload?");

    let mut bytes = vec![];
    if path == "-" \{
        std::io::stdin().read_to_end(&mut bytes).map_err(crate::ClientError::Io)?;
    } else \{
        std::fs::File::open(&path)
            .and_then(|mut fd| fd.read_to_end(&mut bytes))
            .map_err(crate::ClientError::Io)?;
    };

    {{- for coder in media_coders }}

    let err = match {coder.decoder | unescaped}(bytes.as_slice()) \{
        Ok(t) => return Ok(t),
        Err(e) => crate::ClientError::Api(ApiError::{coder.error_variant | unescaped}(e)),
    };

    log::debug!("Error decoding payload as {coder.range | unescaped}: \{:?}", err);
    {{- endfor }}

    Err(err)
}

pub(super) async fn fetch_response<'a, C>(client: &'a C,
                                          _matches: &ArgMatches<'_>,
                                          sub_cmd: &str,
                                          sub_matches: Option<&ArgMatches<'_>>)
                                          -> Result<C::Response, crate::ClientError>
where
    C: ApiClient + Send + Sync + 'static,
    crate::ClientError: From<ApiError<C::Response>>
\{
    let resp = match sub_cmd \{
{match_arms | unescaped}
        _ => unimplemented!(),
    };

    match resp \{
        Ok(r) => Ok(r),
        Err(ApiError::Failure(_, _, r)) => Ok(r),
        Err(e) => return Err(e.into()),
    }
}
